mixin benefits(benefitsItems, mods, isLinks)
  -
    const baseName = 'benefits'
    let allMods = ''
    if (typeof mods !== 'undefined' && mods) {
      const modsList = mods.split(',')
      for (const element of modsList) {
        allMods += element.trim()[0] === '-' ? ' ' + baseName + element.trim() : ' ' + element.trim() + '__' + baseName
      }
      allMods = allMods.trim()
    }

  .benefits(class=allMods)&attributes(attributes)
    each item in benefitsItems
      +benefits__item(isLinks)(class=item.modClass)
        if item.icon
          .benefits__icon
            img(src=item.icon, alt='')
        .benefits__text
          if item.gradientTitle
            .benefits__gradient-title !{item.gradientTitle}
          if item.title
            .benefits__title !{item.title}
              if item.titleNowrap
                =' '
                span.text-nowrap !{item.titleNowrap}
                  if item.titleTooltip
                    +ui-tooltip(item.titleTooltip)
              else if item.titleTooltip
                +ui-tooltip(item.titleTooltip)
          if item.val
            .benefits__val !{item.val}
          if item.descr
            .benefits__descr !{item.descr}
              if item.descrTooltip
                +ui-tooltip(item.descrTooltip)
          if item.imp
            .benefits__important !{item.imp}
    block

mixin benefits__item(isLink, mods)
  -
    const baseName = 'benefits__item'
    let allMods = ''
    if (typeof mods !== 'undefined' && mods) {
      const modsList = mods.split(',')
      for (const element of modsList) {
        allMods += element.trim()[0] === '-' ? ' ' + baseName + element.trim() : ' ' + element.trim() + '__' + baseName
      }
      allMods = allMods.trim()
    }

  if isLink
    a.benefits__item(class=allMods href='#')&attributes(attributes)
      block
  else
    .benefits__item(class=allMods)&attributes(attributes)
      block
